@page "/gamepage/{resume:int}"
@using ChainDoku.Components
@using Models;
@using Models.Enums;
@using ChainDoku.Services;
@using System;
@using Solver;
@using System.Diagnostics;

@inject SudokuGridGenerator GridGenerator
@inject StateService StateService
@inject NavigationManager Navigation
@inject SolverService SolverService;
@inject SettingsService Settings;

<h2 class="h1 d-flex justify-content-center w-95vw">
    Sudoku
</h2>
<div class="d-flex justify-content-between m-auto w-95vw mb-1">
    <div class="d-flex justify-content-start">
        <Button OnClick=GoBack Icon="fas fa-chevron-left" />
    </div>
    <div class="d-flex justify-content-end gap-2">
        <Button OnClick=ConfirmToFillTempValues Icon="fas fa-magic" />
        <Button OnClick=ConfitmClearAll Icon="fas fa-broom" />
    </div>
</div>
<div class="d-flex flex-column game">
    <div class=" d-flex flex-column w-95vw m-auto table-grid">
        @for (var row = 0; row < 9; row++)
        {
            <div class="d-flex table-row">
                @for (int col = 0; col < 9; col++)
                {
                    <SCell Cell="_grid[row,col]" Click="UpdateSelection" State="_state" />
                }
            </div>
        }
    </div>
    <div class="actions button-actions">
        <Button IsDisabled=true OnClick=Revert Color="Color.None">
            <i class="fas fa-undo"></i>
            <span>Undo</span>
        </Button>
        <Button OnClick="Clear" Color="Color.None">
            <i class="fas fa-eraser"></i>
            <span>Clear</span>
        </Button>
        <Button OnClick="ChangeMode" Color="Color.None">
            <i class="@(_state.IsNotesMode ? "notes" : "") far fa-edit"></i>
            <span>Notes</span>
        </Button>
        <Button OnClick="SolveOne" Color="Color.None">
            <i class="far fa-lightbulb"></i>
            <span>Help</span>
        </Button>
    </div>
    <div class="actions digit-actions">
        @for (var i = 1; i < 10; i++)
        {
            var digit = i;
            var isOver = IsDigitOver(digit);
            if (isOver)
            {
                <Button class="disabled" IsDisabled=true Color="Color.Primary"></Button>
            }
            else
            {
                <Button OnClick='() => SetDigit(digit)' Color="Color.Primary">
                    @digit
                </Button>
            }
        }
    </div>
</div>
@code {
    [Parameter]
    public int Resume { get; set; }

    private SudokuGrid _grid;
    private GridState _state;

    private Models.Cell ActiveGridCell => _grid[_state.ActiveRow.Value, _state.ActiveColumn.Value];
    private bool ActiveCell => _state.ActiveRow.HasValue && _state.ActiveColumn.HasValue;

    private bool IsDigitOver(int digit) => _grid.Grid.Cast<Cell>().Count(c => c.Value == digit) >= 9;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Init();
    }

    private void Init()
    {
        _grid = Resume == 1
            ? new SudokuGrid(StateService.GetLastState())
            : GridGenerator.GenerateGrid(Settings.Difficulty);
        StateService.SaveState(_grid.Grid);
        _state = new GridState();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/{true}");
    }

    private void UpdateSelection(int row, int column)
    {
        PerformFeedback();
        if (row != _state.ActiveRow || column != _state.ActiveColumn)
        {
            _state.SetCell(_grid[row, column]);
            StateHasChanged();
        }
    }

    private void SetDigit(int value)
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        if (!_state.IsNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                foreach (var cell in _grid.Where(c => !c.IsStatic && (c.Row == _state.ActiveRow.Value || c.Column == _state.ActiveColumn.Value || c.Block == _state.ActiveBlock)))
                {
                    cell.Candidates.Remove(value);
                }
            }
            ActiveGridCell.ToggleValue(value);
        }
        else
        {
            ActiveGridCell.ToggleTemp(value);
        }

        _state.SetCell(ActiveGridCell);

        StateService.SaveState(_grid.Grid);
        StateHasChanged();
    }

    private void Revert()
    {
        if (StateService.TryGetState(out Cell[,] oldCells))
        {
            _grid.SetState(oldCells);
            if (ActiveCell)
            {
                _state.SetCell(ActiveGridCell);
            }
            StateHasChanged();
        }
    }

    private void SolveOne()
    {
        PerformFeedback();

        SolverService.TrySolve(_grid);
        StateHasChanged();
    }

    private void ChangeMode()
    {
        PerformFeedback();
        _state.ToggleNotes();
    }

    private void Clear()
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic || ActiveGridCell.IsEmpty)
        {
            return;
        }

        ActiveGridCell.Clear();

        SaveState();
        StateHasChanged();
    }

    private async Task ConfirmToFillTempValues()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to fill all notes?", "YES", "NO");
        if (answer)
        {
            FillTempValues();
            SaveState();
        }
    }

    private async Task ConfitmClearAll()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to clear all cells?", "YES", "NO");
        if (answer)
        {
            ClearAll();
            SaveState();
        }
    }

    private void FillTempValues()
    {
        foreach (var cell in _grid.Where(c => !c.HasValue))
        {
            for (int val = 1; val <= 9; val++)
            {
                if (!_grid.Any(c => c.SameRegion(cell) && c.Value == val))
                {
                    cell.AddTemp(val);
                }
            }
        }

        _state.Clear();
        StateHasChanged();
    }

    private void ClearAll()
    {
        foreach (var cell in _grid)
        {
            cell.Clear();
        }

        _state.Clear();
        StateHasChanged();
    }

    private void SaveState()
    {
        StateService.SaveState(_grid.Grid);
    }

    private void PerformFeedback()
    {
        if (HapticFeedback.Default.IsSupported)
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        }
    }
}
