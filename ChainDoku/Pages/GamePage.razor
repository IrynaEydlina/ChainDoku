@page "/"
@using ChainDoku.Models;
@using ChainDoku.Services;
@using System;
@inject SudokuGridGenerator gridGenerator
@inject StateService stateService
<h3 style="
    justify-content: center;
    display: flex;
">
    GamePage
</h3>

<div class="table-grid">
    @for (var row = 0; row < 9; row++)
    {
        <div class="table-row">
            @for (int col = 0; col < 9; col++)
            {
                var i = row;
                var j = col;
                var digitClass = grid[row, col].IsStatic ? "static-value" : "non-static-value";
                <div class="table-cell @digitClass @string.Join(" ", classes[(row, col)])" @onclick='() => UpdateSelection(i, j)'>
                    @if (grid[row, col].IsBig)
                    {
                        @(grid[row, col].Value?.ToString() ?? string.Empty)
                    }
                    else
                    {
                        <div class="sub-grid">
                            @foreach (var s in SmallStart)
                            {
                                <div class="mini-row">
                                    @for (int mj = 0; mj < 3; mj++)
                                    {
                                        <span class="mini-cell @(GetBoldMiniCell(s+mj))">
                                            @if (@grid[row, col].TemporaryValues[s + mj])
                                            {
                                                @(s + mj)
                                            }
                                        </span>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>
<div class="actions button-actions">
    <button @onclick='Revert'>
        <i class="oi oi-action-undo" aria-hidden="true"></i>
        <span>Revert</span>
    </button>
    <button @onclick='Clear'>
        <i class="oi oi-trash" aria-hidden="true"></i>
        <span>Clear</span>
    </button>
    <button @onclick='ChangeMode'>
        <i class="oi oi-pencil @(_isNotesMode ? "notes" : "")" aria-hidden="true"></i>
        <span>Notes</span>
    </button>
    <button class="disabled">
        <i class="oi oi-info" aria-hidden="true"></i>
        <span>Help</span>
    </button>
</div>

<div class="actions digit-actions">
    <button @onclick='() => SetDigit(1)'>1</button>
    <button @onclick='() => SetDigit(2)'>2</button>
    <button @onclick='() => SetDigit(3)'>3</button>
    <button @onclick='() => SetDigit(4)'>4</button>
    <button @onclick='() => SetDigit(5)'>5</button>
    <button @onclick='() => SetDigit(6)'>6</button>
    <button @onclick='() => SetDigit(7)'>7</button>
    <button @onclick='() => SetDigit(8)'>8</button>
    <button @onclick='() => SetDigit(9)'>9</button>
</div>

<style>
    .table-grid {
        display: flex;
        flex-direction: column;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* IE 10 and IE 11 */
        user-select: none; /* Standard syntax */
        background-color: #f1f2eb;
        width: 90vw;
        margin: auto;
    }

    .table-row {
        width: 90vw;
        display: flex;
    }

        .table-row:first-child {
            border-top: 2px solid black;
        }

        .table-row:nth-child(3n+3) {
            border-bottom: 2px solid black;
        }

    .table-cell {
        border-width: 1px;
        border-style: solid;
        border-color: black;
        width: 10vw;
        height: 10vw;
        vertical-align: middle;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 7vw;
        cursor: pointer;
    }

        .table-cell:nth-child(3n+3) {
            border-right: 2px solid black;
        }

        .table-cell:first-child {
            border-left: 2px solid black;
        }

    .sub-grid {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
        color: black;
    }

    .mini-row {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        width: 100%;
        flex: 1 1 0;
    }

    .mini-cell {
        font-size: 3vw;
        display: flex;
        flex: 1 1 0;
        align-content: center;
        justify-content: center;
    }

    .static-value {
        color: #272932;
    }

    .non-static-value {
        color: dodgerblue;
    }

    .bold {
        font-weight: bold;
    }

    .selected {
        background-color: #b9e3c6;
    }

    .selected-value {
        background-color: lightgreen !important;
    }

    .selected-cell {
        background-color: greenyellow !important;
    }

    .notes {
        color: dodgerblue;
    }

    .actions {
        display: flex;
        padding: 20px 10px;
        justify-content: space-around;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* IE 10 and IE 11 */
        user-select: none; /* Standard syntax */
    }

    .button-actions > button {
        display: flex;
        flex: 0 1 10vw;
        flex-direction: column;
        gap: 10px;
        justify-content: center;
        align-items: center;
        width: 10vw;
        cursor: pointer;
        border: unset;
        background-color: inherit;
        border-radius: 20px;
    }

        .button-actions > button:active {
            background-color: aliceblue;
        }

        .button-actions > button > i {
            font-size: 5vw;
        }

        .button-actions > button > span {
            font-size: 2vw;
        }

    .disabled {
        pointer-events: none;
        opacity: 0.4;
    }

    .digit-actions {
        gap: 1vw;
    }

        .digit-actions > button {
            font-size: 8vw;
            color: darkgreen;
            cursor: pointer;
            border: unset;
            background-color: inherit;
            display: flex;
            flex: 1 1 0;
            justify-content: center;
        }

            .digit-actions > button:active {
                background-color: aliceblue;
            }
</style>

@code {
    private bool _isNotesMode = false;
    private const string Selected = "selected";
    private const string SelectedValue = "selected-value";
    private const string SelectedCell = "selected-cell";
    private readonly string[] SelectedStyles = new[] { Selected, SelectedValue, SelectedCell };
    private SudokuGrid grid;
    private readonly object _lock = new object();
    private readonly int[] SmallStart = new[] { 1, 4, 7 };

    private int? ActiveRow;
    private int? ActiveColumn;

    private Dictionary<(int Row, int Column), HashSet<string>> classes = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        grid = gridGenerator.GenerateGrid();
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                classes[(i, j)] = new();
            }
        }
        stateService.SaveState(grid.Cells);
    }

    private void UpdateSelection(int row, int column)
    {
        lock (_lock)
        {
            if (row == ActiveRow && column == ActiveColumn)
            {
                ClearSelection();
                ActiveRow = null;
                ActiveColumn = null;
                return;
            }
            ActiveRow = row;
            ActiveColumn = column;

            RefreshSelection();
        }
    }

    private void RefreshSelection()
    {
        ClearSelection();
        SetSelection();
    }

    private void ClearSelection()
    {
        foreach (var c in classes)
        {
            foreach (var style in SelectedStyles)
            {
                if (c.Value.Contains(style))
                {
                    c.Value.Remove(style);
                }
            }
        }
    }

    private void SetSelection()
    {
        var value = grid[ActiveRow.Value, ActiveColumn.Value].Value;
        foreach (var c in classes)
        {
            if (c.Key.Row == ActiveRow || c.Key.Column == ActiveColumn || IsInSmalSquare(ActiveRow.Value, ActiveColumn.Value, c.Key.Row, c.Key.Column))
            {
                if (c.Key.Row == ActiveRow && c.Key.Column == ActiveColumn)
                {
                    c.Value.Add(SelectedValue);
                    c.Value.Add(SelectedCell);
                }
                else
                {
                    c.Value.Add(Selected);
                }

            }
            if (value.HasValue && value.Value == grid[c.Key.Row, c.Key.Column].Value)
            {
                c.Value.Add(SelectedValue);
            }
        }
    }

    private bool IsInSmalSquare(int row, int column, int newRow, int newColumn) => grid.SubSquares[(row, column)] == grid.SubSquares[(newRow, newColumn)];

    private void SetDigit(int value)
    {
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        stateService.SaveState(grid.Cells);

        if (!_isNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                UpdateTempValuesWhenBigValueIsSet(value);
            }
            ActiveGridCell.SetValue(value);
        }
        else
        {
            ActiveGridCell.AddTemp(value);
        }

        RefreshSelection();
    }

    private void UpdateTempValuesWhenBigValueIsSet(int value)
    {
        stateService.SaveState(grid.Cells);
        grid.RemoveTempValues(ActiveRow.Value, ActiveColumn.Value, value);
    }

    private string GetBoldMiniCell(int value)
    {
        if (!ActiveRow.HasValue || !ActiveColumn.HasValue)
        {
            return string.Empty;
        }

        if (grid[ActiveRow.Value, ActiveColumn.Value].Value == value)
        {
            return "bold";
        }
        return string.Empty;
    }

    private void Revert()
    {
        if (stateService.TryGetState(out var oldCells))
        {
            grid.SetState(oldCells);
            RefreshSelection();
        }
    }

    private void ChangeMode()
    {
        _isNotesMode = !_isNotesMode;
    }

    private void Clear()
    {
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }
        if (ActiveGridCell.Value.HasValue || ActiveGridCell.TemporaryValues.Any(v => v.Value))
        {
            stateService.SaveState(grid.Cells);
            ActiveGridCell.Clear();
        }
    }

    private SudokuCell ActiveGridCell => grid[ActiveRow.Value, ActiveColumn.Value];

    private bool ActiveCell => ActiveRow.HasValue && ActiveColumn.HasValue;
}
