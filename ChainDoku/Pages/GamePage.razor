@page "/gamepage/{resume:int}"
@using ChainDoku.Components
@using ChainDoku.Models;
@using ChainDoku.Models.Enums;
@using ChainDoku.Services;
@using System;

@inject SudokuGridGenerator GridGenerator
@inject StateService StateService
@inject NavigationManager Navigation

<temp class="theme" data-theme="@_theme">
    <h2 class="title">
        Sudoku
    </h2>
    <div class="top-actions">
        <div class="left-actions">
            <button class="btn btn-secondary" @onclick="GoBack"><i class="oi oi-chevron-left" aria-hidden="true"></i></button>
        </div>
        <div class="right-actions">
            <button class="btn btn-info" @onclick="ConfirmToFillTempValues"><i class="oi oi-beaker" aria-hidden="true"></i></button>
            <button class="btn btn-secondary" @onclick="ConfitmClearAll"><i class="oi oi-ban" aria-hidden="true"></i></button>
        </div>
    </div>
    <div class="game">
        <div class="table-grid">
            @for (var row = 0; row < 9; row++)
            {
                <div class="table-row">
                    @for (int col = 0; col < 9; col++)
                    {
                        <SCell Cell="_grid[row,col]" Click="UpdateSelection" State="_state" />
                    }
                </div>
            }
        </div>
        <div class="actions button-actions">
            <button @onclick='Revert'>
                <i class="oi oi-action-undo" aria-hidden="true"></i>
                <span>Revert</span>
            </button>
            <button @onclick='Clear'>
                <i class="oi oi-trash" aria-hidden="true"></i>
                <span>Clear</span>
            </button>
            <button class="@(_isNotesMode ? "notes" : "")" @onclick='ChangeMode'>
                <i class="oi oi-pencil" aria-hidden="true"></i>
                <span>Notes</span>
            </button>
            <button class="disabled">
                <i class="oi oi-info" aria-hidden="true"></i>
                <span>Help</span>
            </button>
        </div>
        <div class="actions digit-actions">
            @for (var i = 1; i < 10; i++)
            {
                var digit = i;
                var isOver = IsDigitOver(digit);
                if (isOver)
                {
                    <button class="disabled" disabled="disabled"></button>
                }
                else
                {
                    <button @onclick='() => SetDigit(digit)'>
                        @digit
                    </button>
                }
            }
        </div>
    </div>
</temp>
@code {
    [Parameter]
    public int Resume { get; set; }

    private const string ThemeKey = nameof(ThemeKey);
    private Difficulty _difficulty;
    private string _theme;
    private bool _isNotesMode = false;
    private SudokuGrid _grid;
    private GridState _state;

    private bool IsDigitOver(int digit) => _grid.Grid.Cast<SudokuCell>().Count(c => c.Value == digit) >= 9;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        await Init();
    }

    private async Task Init()
    {
        _difficulty = (Difficulty)Preferences.Get("DiffKey", 0);
        _theme = Preferences.Get(ThemeKey, "light");
        _grid = Resume == 1
            ? new SudokuGrid(await StateService.GetLastState())
            : GridGenerator.GenerateGrid(_difficulty);
        StateService.SaveState(_grid.Grid);
        _state = new GridState();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/{true}");
    }

    private void UpdateSelection(int row, int column)
    {
        PerformFeedback();
        if (row == _state.ActiveRow && column == _state.ActiveColumn)
        {
            _state.Clear();
        }
        else
        {
            _state.ActiveRow = row;
            _state.ActiveColumn = column;
            _state.ActiveValue = _grid[row, column].Value;
        }
        StateHasChanged();
    }

    private void SetDigit(int value)
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        if (!_isNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                var gridIndex = SudokuHelper.SubSquares[_state.ActiveRow.Value, _state.ActiveColumn.Value];
                for (var i = 0; i < 9; i++)
                {
                    for (var j = 0; j < 9; j++)
                    {
                        if (!_grid.Grid[i, j].IsStatic && (i == _state.ActiveRow.Value || j == _state.ActiveColumn.Value || gridIndex == SudokuHelper.SubSquares[i, j]))
                        {
                            _grid.Grid[i, j].TemporaryValues.Remove(value);
                        }
                    }
                }
            }
            ActiveGridCell.ToggleValue(value);
            _state.ActiveValue = value;
        }
        else
        {
            ActiveGridCell.ToggleTemp(value);
            _state.ActiveValue = null;
        }
        StateService.SaveState(_grid.Grid);

        StateHasChanged();
    }

    private void Revert()
    {
        PerformFeedback();
        if (StateService.TryGetState(out SudokuCell[,] oldCells))
        {
            _grid.SetState(oldCells);
            _state.ActiveValue = ActiveCell ? ActiveGridCell.Value : null;
        }
    }

    private void ChangeMode()
    {
        PerformFeedback();
        _isNotesMode = !_isNotesMode;
    }

    private void Clear()
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic || ActiveGridCell.IsEmpty)
        {
            return;
        }

        ActiveGridCell.Clear();
        SaveState();
    }

    private async Task ConfirmToFillTempValues()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to fill all notes?", "YES", "NO");
        if (answer)
        {
            FillTempValues();
            SaveState();
        }
    }

    private async Task ConfitmClearAll()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to clear all cells?", "YES", "NO");
        if (answer)
        {
            ClearAll();
            SaveState();
        }
    }

    private void FillTempValues()
    {
        for (int row = 0; row < 9; row++)
        {
            for (int col = 0; col < 9; col++)
            {
                if (!_grid[row, col].Value.HasValue)
                {
                    var subSquare = SudokuHelper.SubSquares[row, col];
                    for (int val = 1; val <= 9; val++)
                    {
                        bool valueExists = false;
                        for (int i = 0; i < 9; i++)
                        {
                            for (int j = 0; j < 9; j++)
                            {
                                if (i == row || j == col || SudokuHelper.SubSquares[i, j] == subSquare)
                                {
                                    valueExists |= _grid[i, j].Value == val;
                                }
                            }
                        }
                        if (!valueExists)
                        {
                            _grid[row, col].AddTemp(val);
                        }
                    }
                }
            }
        }
        _state.Clear();
        StateHasChanged();
    }

    private void ClearAll()
    {
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                _grid[i, j].Clear();
            }
        }

        _state.Clear();
        StateHasChanged();
    }

    private void SaveState()
    {
        StateService.SaveState(_grid.Grid);
    }

    private SudokuCell ActiveGridCell => _grid[_state.ActiveRow.Value, _state.ActiveColumn.Value];

    private bool ActiveCell => _state.ActiveRow.HasValue && _state.ActiveColumn.HasValue;

    private void PerformFeedback()
    {
        if (HapticFeedback.Default.IsSupported)
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        }
    }
}
