@page "/gamepage/{resume:int}"
@using ChainDoku.Components
@using ChainDoku.Models;
@using ChainDoku.Models.Enums;
@using ChainDoku.Services;
@using System;

@inject SudokuGridGenerator GridGenerator
@inject StateService StateService
@inject NavigationManager Navigation
<h2 class="title">
    Sudoku
</h2>
<div class="top-actions">
    <div class="left-actions">
        <button class="btn btn-secondary" @onclick="GoBack"><i class="oi oi-chevron-left" aria-hidden="true"></i></button>
    </div>
    <div class="right-actions">
        <button class="btn btn-info" @onclick="ConfirmToFillTempValues"><i class="oi oi-beaker" aria-hidden="true"></i></button>
        <button class="btn btn-secondary" @onclick="ConfitmClearAll"><i class="oi oi-ban" aria-hidden="true"></i></button>
    </div>
</div>
<div class="game" @attributes="@attributes">
    <div class="table-grid">
        @for (var row = 0; row < 9; row++)
        {
            <div class="table-row">
                @for (int col = 0; col < 9; col++)
                {
                    <SCell Cell="_grid[row,col]" Click="UpdateSelection" State="_state" />
                }
            </div>
        }
    </div>
    <div class="actions button-actions">
        <ActionButton Action="Revert" Disabled="false" Icon="oi-action-undo" Text="Revert" />
        <ActionButton Action="Clear" Disabled="false" Icon="oi-trash" Text="Clear" />
        <ActionButton Action="ChangeMode" Disabled="false" Icon="oi-pencil" Text="Notes" Class="@(_isNotesMode ? "notes" : "")" />
        <ActionButton Action="Revert" Disabled="true" Icon="oi-info" Text="Help" />
    </div>
    <div class="actions digit-actions">
        <button @onclick='() => SetDigit(1)'>1</button>
        <button @onclick='() => SetDigit(2)'>2</button>
        <button @onclick='() => SetDigit(3)'>3</button>
        <button @onclick='() => SetDigit(4)'>4</button>
        <button @onclick='() => SetDigit(5)'>5</button>
        <button @onclick='() => SetDigit(6)'>6</button>
        <button @onclick='() => SetDigit(7)'>7</button>
        <button @onclick='() => SetDigit(8)'>8</button>
        <button @onclick='() => SetDigit(9)'>9</button>
    </div>
</div>

@code {
    [Parameter]
    public int Resume { get; set; }
    private Difficulty _difficulty;

    private bool _isNotesMode = false;
    private SudokuGrid _grid;
    private GridState _state;
    private Dictionary<string, object> attributes = new Dictionary<string, object>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        _difficulty = (Difficulty)Preferences.Get("DiffKey", 0);
        if (Resume == 1)
        {
            var lastGrid = await StateService.GetLastState();
            _grid = new SudokuGrid(lastGrid);
        }
        else
        {
            _grid = GridGenerator.GenerateGrid(_difficulty);
        }
        StateService.SaveState(_grid.Grid);
        _state = new GridState();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void UpdateSelection(int row, int column)
    {
        PerformFeedback();
        if (row == _state.ActiveRow && column == _state.ActiveColumn)
        {
            _state.Clear();
        }
        else
        {
            _state.ActiveRow = row;
            _state.ActiveColumn = column;
            _state.ActiveValue = _grid[row, column].Value;
        }
        StateHasChanged();
    }

    private void SetDigit(int value)
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        if (!_isNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                _grid.RemoveTempValues(_state.ActiveRow.Value, _state.ActiveColumn.Value, value);
            }
            ActiveGridCell.ToggleValue(value);
            _state.ActiveValue = value;
        }
        else
        {
            ActiveGridCell.ToggleTemp(value);
        }
        StateService.SaveState(_grid.Grid);

        StateHasChanged();
    }

    private void Revert()
    {
        PerformFeedback();
        if (StateService.TryGetState(out SudokuCell[,] oldCells))
        {
            _grid.SetState(oldCells);
            _state.ActiveValue = ActiveCell ? ActiveGridCell.Value : null;
        }
    }

    private void ChangeMode()
    {
        PerformFeedback();
        _isNotesMode = !_isNotesMode;
        if (!attributes.ContainsKey("data-theme"))
        {
            attributes["data-theme"] = string.Empty;
        }

        attributes["data-theme"] = _isNotesMode ? "dark" : "light";
    }

    private void Clear()
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic || ActiveGridCell.IsEmpty)
        {
            return;
        }

        ActiveGridCell.Clear();
        SaveState();
    }

    private async Task ConfirmToFillTempValues()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to fill all notes?", "YES", "NO");
        if (answer)
        {
            FillTempValues();
            SaveState();
        }
    }

    private async Task ConfitmClearAll()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to clear all cells?", "YES", "NO");
        if (answer)
        {
            ClearAll();
            SaveState();
        }
    }

    private void FillTempValues()
    {
        for (int row = 0; row < 9; row++)
        {
            for (int col = 0; col < 9; col++)
            {
                if (!_grid[row, col].Value.HasValue)
                {
                    var subSquare = SudokuHelper.SubSquares[row, col];
                    for (int val = 1; val <= 9; val++)
                    {
                        bool valueExists = false;
                        for (int i = 0; i < 9; i++)
                        {
                            for (int j = 0; j < 9; j++)
                            {
                                if (i == row || j == col || SudokuHelper.SubSquares[i, j] == subSquare)
                                {
                                    valueExists |= _grid[i, j].Value == val;
                                }
                            }
                        }
                        if (!valueExists)
                        {
                            _grid[row, col].AddTemp(val);
                        }
                    }
                }
            }
        }
        _state.Clear();
        StateHasChanged();
    }

    private void ClearAll()
    {
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                _grid[i, j].Clear();
            }
        }

        _state.Clear();
        StateHasChanged();
    }

    private void SaveState()
    {
        StateService.SaveState(_grid.Grid);
    }

    private SudokuCell ActiveGridCell => _grid[_state.ActiveRow.Value, _state.ActiveColumn.Value];

    private bool ActiveCell => _state.ActiveRow.HasValue && _state.ActiveColumn.HasValue;

    private void PerformFeedback()
    {
        if (HapticFeedback.Default.IsSupported)
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        }
    }
}
