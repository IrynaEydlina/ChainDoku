@page "/"
@using ChainDoku.Models;
@using ChainDoku.Services;
@using System;
@inject SudokuGridGenerator gridGenerator
<h3>GamePage</h3>

<div class="table-grid">
    @for (var row = 0; row < 9; row++)
    {
        <div class="table-row row-@row">
            @for (int col = 0; col < 9; col++)
            {
                var i = row;
                var j = col;
                var digitClass = grid[row, col].IsStatic ? "static-value" : "non-static-value";
                <div class="table-cell @digitClass @string.Join(" ", classes[(row, col)])" row="@row" column="@col" @onclick='() => UpdateSelection(i, j)'>
                    @(grid[row, col].Value?.ToString() ?? string.Empty)
                </div>
            }
        </div>
    }
</div>
<div class="actions">
    <button>Revert</button>
    <button>Clear</button>
    <button>Notes</button>
    <button>Help</button>
</div>

<div class="actions digit-actions">
    <div @onclick='() => SetDigit(1)'>1</div>
    <div @onclick='() => SetDigit(2)'>2</div>
    <div @onclick='() => SetDigit(3)'>3</div>
    <div @onclick='() => SetDigit(4)'>4</div>
    <div @onclick='() => SetDigit(5)'>5</div>
    <div @onclick='() => SetDigit(6)'>6</div>
    <div @onclick='() => SetDigit(7)'>7</div>
    <div @onclick='() => SetDigit(8)'>8</div>
    <div @onclick='() => SetDigit(9)'>9</div>
</div>

<style>
    .table-grid {
        display: flex;
        flex-direction: column;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* IE 10 and IE 11 */
        user-select: none; /* Standard syntax */
        background-color: #f1f2eb;
    }

    .table-row {
        width: 90vw;
        display: flex;
    }

        .table-row:first-child {
            border-top: 2px solid black;
        }

        .table-row:nth-child(3n+3) {
            border-bottom: 2px solid black;
        }

    .table-cell {
        border-width: 1px;
        border-style: solid;
        border-color: black;
        width: 10vw;
        height: 10vw;
        vertical-align: middle;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 5vw;
        cursor: pointer;
    }

        .table-cell:nth-child(3n+3) {
            border-right: 2px solid black;
        }

        .table-cell:first-child {
            border-left: 2px solid black;
        }

    .static-value {
        color: #272932;
    }

    .non-static-value {
        color: limegreen;
    }

    .selected {
        background-color: #b9e3c6;
    }

    .selected-value {
        background-color: lightgreen !important;
    }
    .selected-cell {
        border:4px double darkgreen !important;
    }

    .actions {
        display: flex;
        padding: 20px 10px;
        justify-content: space-around;
        -webkit-user-select: none; /* Safari */
        -ms-user-select: none; /* IE 10 and IE 11 */
        user-select: none; /* Standard syntax */
    }

    actions > div {
        cursor: pointer;
    }

    .digit-actions > div {
        font-size: 6vw;
        color: darkgreen;
        cursor: pointer;
    }
</style>

@code {
    private const string Selected = "selected";
    private const string SelectedValue = "selected-value";
    private const string SelectedCell = "selected-cell";
    private readonly string[] SelectedStyles = new[] { Selected, SelectedValue, SelectedCell };
    private SudokuGrid grid;
    private readonly object _lock = new object();

    private int? ActiveRow;
    private int? ActiveColumn;

    private Dictionary<(int Row, int Column), HashSet<string>> classes = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        grid = gridGenerator.GenerateGrid();
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                classes[(i, j)] = new HashSet<string>
                {
                    "table-cell",
                    $"row-{i}",
                    $"col-{j}"
                };
            }
        }

    }

    private void UpdateSelection(int row, int column)
    {
        lock (_lock)
        {
            if (row == ActiveRow && column == ActiveColumn)
            {
                ClearSelection();
                ActiveRow = null;
                ActiveColumn = null;
                return;
            }
            ActiveRow = row;
            ActiveColumn = column;

            RefreshSelection();
        }
    }

    private void RefreshSelection()
    {
        ClearSelection();
        SetSelection();
    }

    private void ClearSelection()
    {
        foreach (var c in classes)
        {
            foreach (var style in SelectedStyles)
            {
                if (c.Value.Contains(style))
                {
                    c.Value.Remove(style);
                }
            }
        }
    }

    private void SetSelection()
    {
        var value = grid[ActiveRow.Value, ActiveColumn.Value].Value;
        foreach (var c in classes)
        {
            if (c.Key.Row == ActiveRow || c.Key.Column == ActiveColumn || IsInSmalSquare(ActiveRow.Value, ActiveColumn.Value, c.Key.Row, c.Key.Column))
            {
                if (c.Key.Row == ActiveRow && c.Key.Column == ActiveColumn)
                {
                    c.Value.Add(SelectedValue);
                    c.Value.Add(SelectedCell);
                }
                else
                {
                    c.Value.Add(Selected);
                }

            }
            if (value.HasValue && value.Value == grid[c.Key.Row, c.Key.Column].Value)
            {
                c.Value.Add(SelectedValue);
            }
        }
    }

    private bool IsInSmalSquare(int row, int column, int newRow, int newColumn) => SubSquares[(row, column)] == SubSquares[(newRow, newColumn)];

    private static IReadOnlyDictionary<(int, int), int> _subSquares = null;

    private IReadOnlyDictionary<(int, int), int> SubSquares
    {
        get
        {
            if (_subSquares != null)
            {
                return _subSquares;
            }
            var dic = new Dictionary<(int, int), int>();
            for (int i = 0; i < 9; i++)
            {
                for (int j = 0; j < 9; j++)
                {
                    var startRow = i / 3;
                    var startColumn = j / 3;
                    dic.Add((i, j), startRow * 3 + startColumn);
                }
            }
            _subSquares = dic;
            return _subSquares;
        }
    }

    private void SetDigit(int value)
    {
        if (!ActiveRow.HasValue || !ActiveColumn.HasValue || grid[ActiveRow.Value, ActiveColumn.Value].IsStatic)
        {
            return;
        }
        grid[ActiveRow.Value, ActiveColumn.Value].SetValue(value);
        RefreshSelection();
    }
}
