@page "/gamepage/{resume:int}"
@using ChainDoku.Components
@using Models;
@using Models.Enums;
@using ChainDoku.Services;
@using System;
@using Solver;

@inject SudokuGridGenerator GridGenerator
@inject StateService StateService
@inject NavigationManager Navigation
@inject SolverService SolverService;

<h2 class="title">
    Sudoku
</h2>
<div class="top-actions">
    <div class="left-actions">
        <button @onclick="GoBack"><i class="fas fa-chevron-left"></i></button>
    </div>
    <div class="right-actions">
        <button @onclick="ConfirmToFillTempValues"><i class="fas fa-magic"></i></button>
        <button @onclick="ConfitmClearAll"><i class="fas fa-broom"></i></button>
    </div>
</div>
<div class="game">
    <div class="table-grid">
        @for (var row = 0; row < 9; row++)
        {
            <div class="table-row">
                @for (int col = 0; col < 9; col++)
                {
                    <SCell Cell="_grid[row,col]" Click="UpdateSelection" State="_state" />
                }
            </div>
        }
    </div>
    <div class="actions button-actions">
        <button disabled class="disabled" @onclick="Revert">
            <i class="fas fa-undo"></i>
            <span>Undo</span>
        </button>
        <button @onclick="Clear">
            <i class="fas fa-eraser"></i>
            <span>Clear</span>
        </button>
        <button @onclick="ChangeMode">
            <i class="@(_isNotesMode ? "notes" : "") far fa-edit"></i>
            <span>Notes</span>
        </button>
        <button @onclick="SolveOne">
            <i class="far fa-lightbulb"></i>
            <span>Help</span>
        </button>
    </div>
    <div class="actions digit-actions">
        @for (var i = 1; i < 10; i++)
        {
            var digit = i;
            var isOver = IsDigitOver(digit);
            if (isOver)
            {
                <button class="disabled" disabled></button>
            }
            else
            {
                <button @onclick='() => SetDigit(digit)'>
                    @digit
                </button>
            }
        }
    </div>
</div>
@code {
    [Parameter]
    public int Resume { get; set; }

    private const string ThemeKey = nameof(ThemeKey);
    private const string DiffKey = nameof(DiffKey);
    private Difficulty _difficulty;
    private string _theme;
    private bool _isNotesMode = false;
    private SudokuGrid _grid;
    private GridState _state;

    private bool IsDigitOver(int digit) => _grid.Grid.Cast<Cell>().Count(c => c.Value == digit) >= 9;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Init();
    }

    private void Init()
    {
        _difficulty = (Difficulty)Preferences.Get("DiffKey", 0);
        _theme = Preferences.Get(ThemeKey, "light");
        _grid = Resume == 1
            ? new SudokuGrid(StateService.GetLastState())
            : GridGenerator.GenerateGrid(_difficulty);
        StateService.SaveState(_grid.Grid);
        _state = new GridState();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/{true}");
    }

    private void UpdateSelection(int row, int column)
    {
        PerformFeedback();
        if (row == _state.ActiveRow && column == _state.ActiveColumn)
        {
            _state.Clear();
        }
        else
        {
            _state.ActiveRow = row;
            _state.ActiveColumn = column;
            _state.ActiveValue = _grid[row, column].Value;
        }
        StateHasChanged();
    }

    private void SetDigit(int value)
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        if (!_isNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                var block = _state.Block;
                foreach (var cell in _grid.Where(c => !c.IsStatic && (c.Row == _state.ActiveRow.Value || c.Column == _state.ActiveColumn.Value || c.Block == block)))
                {
                    cell.Candidates.Remove(value);
                }
            }
            ActiveGridCell.ToggleValue(value);
            _state.ActiveValue = value;
        }
        else
        {
            ActiveGridCell.ToggleTemp(value);
            _state.ActiveValue = null;
        }
        StateService.SaveState(_grid.Grid);

        StateHasChanged();
    }

    private void Revert()
    {
        if (StateService.TryGetState(out Cell[,] oldCells))
        {
            _grid.SetState(oldCells);
            _state.ActiveValue = ActiveCell && ActiveGridCell.HasValue ? ActiveGridCell.Value : null;
        }
    }

    private void SolveOne()
    {
        PerformFeedback();

        SolverService.TrySolve(_grid);
    }

    private void ChangeMode()
    {
        PerformFeedback();
        _isNotesMode = !_isNotesMode;
    }

    private void Clear()
    {
        PerformFeedback();
        if (!ActiveCell || ActiveGridCell.IsStatic || ActiveGridCell.IsEmpty)
        {
            return;
        }

        ActiveGridCell.Clear();
        SaveState();
    }

    private async Task ConfirmToFillTempValues()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to fill all notes?", "YES", "NO");
        if (answer)
        {
            FillTempValues();
            SaveState();
        }
    }

    private async Task ConfitmClearAll()
    {
        PerformFeedback();
        var answer = await Application.Current.MainPage.DisplayAlert("Info", "Do you want to clear all cells?", "YES", "NO");
        if (answer)
        {
            ClearAll();
            SaveState();
        }
    }

    private void FillTempValues()
    {
        foreach(var cell in _grid.Where(c => !c.HasValue))
        {
            for (int val = 1; val <= 9; val++)
            {
                if (!_grid.Any(c => c.SameRegion(cell) && c.Value == val))
                {
                    cell.AddTemp(val);
                }
            }
        }
        _state.Clear();
        StateHasChanged();
    }

    private void ClearAll()
    {
        foreach (var cell in _grid)
        {
            cell.Clear();
        }

        _state.Clear();
        StateHasChanged();
    }

    private void SaveState()
    {
        StateService.SaveState(_grid.Grid);
    }

    private Cell ActiveGridCell => _grid[_state.ActiveRow.Value, _state.ActiveColumn.Value];

    private bool ActiveCell => _state.ActiveRow.HasValue && _state.ActiveColumn.HasValue;

    private void PerformFeedback()
    {
        if (HapticFeedback.Default.IsSupported)
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);
        }
    }
}
