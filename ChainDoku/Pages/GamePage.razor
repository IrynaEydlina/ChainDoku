@page "/"
@using ChainDoku.Components
@using ChainDoku.Models;
@using ChainDoku.Services;
@using System;
@inject SudokuGridGenerator gridGenerator
@inject StateService stateService

<h3 class="header">
    GamePage
</h3>
<div class="game">
    <div class="table-grid">
        @for (var row = 0; row < 9; row++)
        {
            <div class="table-row">
                @for (int col = 0; col < 9; col++)
                {
                    <SCell Cell="_grid[row,col]" Click="UpdateSelection" State="_state" />
                }
            </div>
        }
    </div>
    <div class="actions button-actions">
        <ActionButton Action="Revert" Disabled="true" Icon="oi-action-undo" Text="Revert" />
        <ActionButton Action="Clear" Disabled="false" Icon="oi-trash" Text="Clear" />
        <ActionButton Action="ChangeMode" Disabled="false" Icon="oi-pencil" Text="Notes" Class="@(_isNotesMode ? "notes" : "")" />
        <ActionButton Action="Revert" Disabled="true" Icon="oi-action-undo" Text="Help" />
    </div>
    <div class="actions digit-actions">
        <button @onclick='() => SetDigit(1)'>1</button>
        <button @onclick='() => SetDigit(2)'>2</button>
        <button @onclick='() => SetDigit(3)'>3</button>
        <button @onclick='() => SetDigit(4)'>4</button>
        <button @onclick='() => SetDigit(5)'>5</button>
        <button @onclick='() => SetDigit(6)'>6</button>
        <button @onclick='() => SetDigit(7)'>7</button>
        <button @onclick='() => SetDigit(8)'>8</button>
        <button @onclick='() => SetDigit(9)'>9</button>
    </div>
</div>

@code {
    private bool _isNotesMode = false;
    private SudokuGrid _grid;
    private GridState _state;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _grid = gridGenerator.GenerateGrid();
        _state = new GridState();
    }

    private void UpdateSelection(int row, int column)
    {
        if (row == _state.ActiveRow && column == _state.ActiveColumn)
        {
            _state.ActiveRow = null;
            _state.ActiveColumn = null;
            _state.ActiveValue = null;
        }
        else
        {
            _state.ActiveRow = row;
            _state.ActiveColumn = column;
            _state.ActiveValue = _grid[row, column].Value;
        }
        StateHasChanged();
    }

    private void SetDigit(int value)
    {
        if (!ActiveCell || ActiveGridCell.IsStatic)
        {
            return;
        }

        stateService.SaveState(_grid.Grid);

        if (!_isNotesMode)
        {
            if (ActiveGridCell.Value != value)
            {
                UpdateTempValuesWhenBigValueIsSet(value);
            }
            ActiveGridCell.SetValue(value);
            _state.ActiveValue = value;
        }
        else
        {
            ActiveGridCell.AddTemp(value);
        }
        StateHasChanged();
    }

    private void UpdateTempValuesWhenBigValueIsSet(int value)
    {
        stateService.SaveState(_grid.Grid);
        _grid.RemoveTempValues(_state.ActiveRow.Value, _state.ActiveColumn.Value, value);
    }

    private void Revert()
    {
        if (stateService.TryGetState(out SudokuCell[,] oldCells))
        {
            _grid.SetState(oldCells);
        }
    }

    private void ChangeMode()
    {
        _isNotesMode = !_isNotesMode;
    }

    private void Clear()
    {
        if (!ActiveCell || ActiveGridCell.IsStatic || ActiveGridCell.IsEmpty)
        {
            return;
        }

        stateService.SaveState(_grid.Grid);
        ActiveGridCell.Clear();
    }

    private SudokuCell ActiveGridCell => _grid[_state.ActiveRow.Value, _state.ActiveColumn.Value];

    private bool ActiveCell => _state.ActiveRow.HasValue && _state.ActiveColumn.HasValue;
}
