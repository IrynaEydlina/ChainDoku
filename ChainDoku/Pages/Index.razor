@page "/{stay?}"
@using ChainDoku.Enums;
@using Models.Enums;
@using ChainDoku.Services;
@inject NavigationManager NavigationManager;
@inject StateService StateService;
@inject SettingsService Settings;
<Layout ShowFooter=false>
    <Header>
        <div class="d-flex justify-content-center align-items-center h1 mt-auto">Sudoku</div>
    </Header>
    <Main>
        <div class="d-flex justify-content-center align-items-center align-content-center flex-column h-100">
            <BootstrapLabel>Select Theme</BootstrapLabel>
            <Select Color=Color.Primary style="margin-bottom:20px; width:75%" TValue="ThemeEnum" @bind-Value=Theme Items="Themes" DisplayText="Select theme" ShowLabel="true" />

            @if (_lastStateExists)
            {
                <Button class="w-75" Color=Color.Secondary Icon="fas fa-circle-play" OnClick=Continue Text="Continue" />
            }
            <Select style="width:75%" Color=Color.Primary TValue="Difficulty" @bind-Value=Difficulty Items="Difficulties" DisplayText="Select Difficulty" ShowLabel="true" />
            <Button class="w-75" Color=Color.Primary style="margin-top:20px" OnClick=NewGame Text="New Game" />
        </div>
    </Main>
    <Footer>
        <div class="d-flex justify-content-center align-items-center footer">Footer</div>
    </Footer>
</Layout>
@code {
    [Parameter]
    public string Stay { get; set; }

    private ThemeEnum Theme
    {
        get => Settings.Theme;
        set => Settings.Theme = value;
    }

    private IEnumerable<SelectedItem> Themes = Enum.GetValues<ThemeEnum>().Select(t => new SelectedItem(t.ToString(), Enum.GetName<ThemeEnum>(t)));

    private Difficulty Difficulty
    {
        get => Settings.Difficulty;
        set => Settings.Difficulty = value;
    }

    private IEnumerable<SelectedItem> Difficulties = Enum.GetValues<Difficulty>().Select(t => new SelectedItem(t.ToString(), Enum.GetName<Difficulty>(t)));

    private bool _lastStateExists;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        // TODO: remove when dev state is done because of not finaly determined structure of saving cells
        // may be splitted into values and candidates preferences to low amount of memory
        StateService.ClearState();
        _lastStateExists = StateService.LastStateExists();
        if (_lastStateExists && string.IsNullOrEmpty(Stay))
        {
            NavigationManager.NavigateTo($"/gamepage/1");
        }
    }

    private void Continue()
    {
        NavigationManager.NavigateTo($"/gamepage/1");
    }

    private void NewGame()
    {
        StateService.ClearState();
        NavigationManager.NavigateTo($"/gamepage/0");
    }
}
