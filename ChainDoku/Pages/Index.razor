@page "/{stay?}"
@using Models.Enums;
@using ChainDoku.Services;
@inject NavigationManager NavigationManager;
@inject StateService StateService;
<theme data-theme="@_theme">
    <div class="main-content">
        <header></header>
        <div class="main-body">
            <h1>Sudoku</h1>
            <div class="main-actions">
                <div>
                    <label class="label">Theme</label>
                    <select class="custom-select" aria-label="Default select example" @bind="Theme">
                        <option value="light">Light</option>
                        <option value="dark">Dark</option>
                    </select>
                </div>
                @if (_lastStateExists)
                {
                    <button class="btn btn-primary" @onclick="Continue">
                        <span class="oi oi-play-circle" aria-hidden="true"></span> Continue
                    </button>
                }
                <div>
                    <label class="label">Select Difficulty</label>
                    <select class="custom-select" aria-label="Default select example" @bind="Diff">
                        @foreach (var i in Enum.GetValues<Difficulty>())
                        {
                            <option value="@i">@(Enum.GetName<Difficulty>(i))</option>
                        }
                    </select>
                </div>
                <button class="btn btn-success" @onclick="NewGame">
                    New Game
                </button>
            </div>
        </div>
        <footer>
        </footer>
    </div>
</theme>
@code {
    [Parameter]
    public string Stay { get; set; }

    private const string DiffKey = nameof(DiffKey);
    private const string ThemeKey = nameof(ThemeKey);
    private bool _lastStateExists;
    private Difficulty _difficulty;

    private Difficulty Diff
    {
        get => _difficulty; set
        {
            _difficulty = value;
            Preferences.Set(DiffKey, (int)_difficulty);
        }
    }

    private string _theme;

    private string Theme
    {
        get => _theme;
        set
        {
            _theme = value;
            Preferences.Set(ThemeKey, value);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // TODO: remove when dev state is done because of not finaly determined structure of saving cells
        // may be splitted into values and candidates preferences to low amount of memory
        StateService.ClearState();

        _lastStateExists = StateService.LastStateExists();

        _difficulty = (Difficulty)Preferences.Get(DiffKey, 0);
        _theme = Preferences.Get(ThemeKey, "light");
        if (_lastStateExists && string.IsNullOrEmpty(Stay))
        {
            NavigationManager.NavigateTo($"/gamepage/1");
        }
    }

    private void Continue()
    {
        NavigationManager.NavigateTo($"/gamepage/1");
    }

    private void NewGame()
    {
        StateService.ClearState();
        NavigationManager.NavigateTo($"/gamepage/0");
    }
}
